import mongoose from 'mongoose';
import 'dotenv/config';
import pkg from 'fb-bot';
const { Bot, Events } = pkg;
import CommandHandler from './core/CommandHandler.js';
import { ProfileCardGenerator } from './utils/ProfileCardGenerator.js';
import fs from 'fs';

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
const MONGODB_URI = process.env.MONGODB_URI;
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;

if (!MONGODB_URI || !PAGE_ACCESS_TOKEN) {
  console.error('โ ุฎุทุฃ: ูุชุบูุฑุงุช ุงูุจูุฆุฉ MONGODB_URI ู PAGE_ACCESS_TOKEN ูุทููุจุฉ');
  process.exit(1);
}

// ุชููุฆุฉ ุงูุจูุช
const bot = new Bot({
  accessToken: PAGE_ACCESS_TOKEN,
  verifyToken: VERIFY_TOKEN,
});

// ุชููุฆุฉ ูุธุงู ุงูุจุทุงูุงุช
const cardGenerator = new ProfileCardGenerator();

// ุชููุฆุฉ ูุนุงูุฌ ุงูุฃูุงูุฑ
let commandHandler;

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
async function connectDatabase() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
  } catch (error) {
    console.error('โ ูุดู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }
}

// ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ ุงููุฏููุฉ
function startCleanupInterval() {
  // ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ ูู ุณุงุนุฉ
  setInterval(() => {
    cardGenerator.cleanupOldFiles();
  }, 3600000); // 3600000 ูููู ุซุงููุฉ = ุณุงุนุฉ ูุงุญุฏุฉ
  
  console.log('๐งน ุชู ุชูุนูู ูุธุงู ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ');
}

// ุฅุฑุณุงู ุฑุณุงูุฉ ูุตูุฉ
async function sendTextMessage(senderId, text) {
  try {
    await bot.sendMessage(senderId, { text });
    console.log(`โ ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ูุตูุฉ ุฅูู ${senderId}`);
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงููุตูุฉ:', error);
  }
}

// ุฅุฑุณุงู ุตูุฑุฉ
async function sendImageMessage(senderId, imagePath, caption = '') {
  try {
    // ูุฑุงุกุฉ ููู ุงูุตูุฑุฉ
    const imageStream = fs.createReadStream(imagePath);
    
    await bot.sendMessage(senderId, {
      attachment: {
        type: 'image',
        payload: { source: imageStream }
      }
    });
    
    console.log(`โ ุชู ุฅุฑุณุงู ุตูุฑุฉ ุฅูู ${senderId}`);
    
    // ุฅุฐุง ูุงู ููุงู ูุต ูุตููุ ุฃุฑุณูู ูุฑุณุงูุฉ ูููุตูุฉ
    if (caption) {
      await sendTextMessage(senderId, caption);
    }
    
    // ุญุฐู ุงูููู ุงููุคูุช ุจุนุฏ ุงูุฅุฑุณุงู
    setTimeout(() => {
      try {
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
          console.log(`๐งน ุชู ุญุฐู ุงูููู ุงููุคูุช: ${imagePath}`);
        }
      } catch (deleteError) {
        console.error('โ ุฎุทุฃ ูู ุญุฐู ุงูููู ุงููุคูุช:', deleteError);
      }
    }, 5000);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุตูุฑุฉ:', error);
    
    // ูู ุญุงูุฉ ูุดู ุฅุฑุณุงู ุงูุตูุฑุฉุ ุฃุฑุณู ุงููุต ุงูุจุฏูู
    if (caption) {
      await sendTextMessage(senderId, caption);
    }
  }
}

// ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ
async function handleMessage(senderId, message) {
  console.log(`๐ฉ ุฑุณุงูุฉ ูู ${senderId}: ${message}`);
  
  try {
    if (!commandHandler) {
      commandHandler = new CommandHandler();
    }
    
    const sender = {
      id: senderId,
      name: `ูุบุงูุฑ-${senderId.slice(-6)}` // ุงุณู ุงูุชุฑุงุถู ุจูุงุกู ุนูู ID
    };
    
    const response = await commandHandler.process(sender, message);
    
    // ุฅุฐุง ูุงู ุงูุฑุฏ ุนุจุงุฑุฉ ุนู ุตูุฑุฉ
    if (response && response.type === 'image') {
      await sendImageMessage(senderId, response.path, response.caption);
    } 
    // ุฅุฐุง ูุงู ุงูุฑุฏ ูุตุงู ุนุงุฏูุงู
    else if (typeof response === 'string') {
      await sendTextMessage(senderId, response);
    }
    // ุฅุฐุง ูุงู ุงูุฑุฏ ูุงุฆู ุจู ุฑุณุงูุฉ
    else if (response && response.message) {
      await sendTextMessage(senderId, response.message);
    }
    else {
      await sendTextMessage(senderId, 'โ ูู ุฃุชููู ูู ูุนุงูุฌุฉ ุทูุจู.');
    }
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ:', error);
    await sendTextMessage(senderId, 'โ ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
  }
}

// ูุนุงูุฌุฉ ุญุฏุซ ุงูุฑุณุงุฆู
bot.on(Events.MESSAGE, async (event) => {
  const { sender, message } = event;
  
  // ุชุฌุงูู ุงูุฑุณุงุฆู ุงููุงุฑุบุฉ
  if (!message || !message.text) {
    return;
  }
  
  await handleMessage(sender.id, message.text);
});

// ูุนุงูุฌุฉ ุญุฏุซ ุงูููุฑ ุนูู ุฒุฑ ุงูุจุฏุก
bot.on(Events.POSTBACK, async (event) => {
  const { sender, postback } = event;
  
  if (postback.payload === 'GET_STARTED') {
    await handleMessage(sender.id, 'ุจุฏุก');
  }
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
bot.on(Events.ERROR, (error) => {
  console.error('โ ุฎุทุฃ ูู ุงูุจูุช:', error);
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุบูุฑ ุงูููุชูุทุฉ
process.on('unhandledRejection', (reason, promise) => {
  console.error('โ ุฎุทุฃ ุบูุฑ ูุนุงูุฌ ูู:', promise, 'ุงูุณุจุจ:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('โ ุงุณุชุซูุงุก ุบูุฑ ูุนุงูุฌ:', error);
  process.exit(1);
});

// ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
async function main() {
  console.log('๐ ุจุฏุก ุชุดุบูู ุจูุช ูุบุงุฑุฉ ุบููุฏ...');
  
  try {
    // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    await connectDatabase();
    
    // ุชูุนูู ูุธุงู ุงูุชูุธูู ุงูุชููุงุฆู
    startCleanupInterval();
    
    // ุชููุฆุฉ ูุนุงูุฌ ุงูุฃูุงูุฑ
    commandHandler = new CommandHandler();
    console.log('โ ุชู ุชููุฆุฉ ูุนุงูุฌ ุงูุฃูุงูุฑ');
    
    // ุจุฏุก ุงุณุชูุจุงู ุงูุฑุณุงุฆู
    const port = process.env.PORT || 3000;
    bot.start(port);
    
    console.log(`โ ุงูุจูุช ูุนูู ุนูู ุงููููุฐ ${port}`);
    console.log('๐ฑ ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุฑุณุงุฆู...');
    
  } catch (error) {
    console.error('โ ูุดู ูู ุจุฏุก ุชุดุบูู ุงูุจูุช:', error);
    process.exit(1);
  }
}

// ุจุฏุก ุงูุชุทุจูู
main().catch(console.error);
